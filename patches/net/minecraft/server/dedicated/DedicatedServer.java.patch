--- /net/minecraft/server/dedicated/DedicatedServer.java
+++ /net/minecraft/server/dedicated/DedicatedServer.java
@@ -6,28 +6,27 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Random;
+
+import jk_5.nailed.logging.NailedLogging;
+import jk_5.nailed.logging.VanillaLogAgent;
+import jk_5.nailed.network.NettyServerHandler;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.command.ServerCommand;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.logging.ILogAgent;
-import net.minecraft.logging.LogAgent;
 import net.minecraft.network.NetworkListenThread;
 import net.minecraft.network.rcon.IServer;
 import net.minecraft.network.rcon.RConThreadMain;
 import net.minecraft.network.rcon.RConThreadQuery;
 import net.minecraft.profiler.PlayerUsageSnooper;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.gui.MinecraftServerGui;
 import net.minecraft.server.management.ServerConfigurationManager;
 import net.minecraft.util.ChunkCoordinates;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumGameType;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldSettings;
-import net.minecraft.world.WorldType;
 
 public class DedicatedServer extends MinecraftServer implements IServer {
     private final List pendingCommandList = Collections.synchronizedList(new ArrayList());
@@ -36,13 +35,12 @@
     private RConThreadMain theRConThreadMain;
     private PropertyManager settings;
     private boolean canSpawnStructures;
-    private EnumGameType gameType;
+    private EnumGameType gameType = EnumGameType.ADVENTURE;
     private NetworkListenThread networkThread;
-    private boolean guiIsEnabled;
 
     public DedicatedServer(File par1File) {
         super(par1File);
-        this.field_98131_l = new LogAgent("Minecraft-Server", (String)null, (new File(par1File, "server.log")).getAbsolutePath());
+        this.field_98131_l = new VanillaLogAgent();
         new DedicatedServerSleepThread(this);
     }
 
@@ -53,6 +51,7 @@
         DedicatedServerCommandThread var1 = new DedicatedServerCommandThread(this);
         var1.setDaemon(true);
         var1.start();
+
         this.getLogAgent().logInfo("Starting minecraft server version 1.6.4");
 
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
@@ -69,25 +68,8 @@
             this.setHostname(this.settings.getProperty("server-ip", ""));
         }
 
-        this.setCanSpawnAnimals(this.settings.getBooleanProperty("spawn-animals", true));
-        this.setCanSpawnNPCs(this.settings.getBooleanProperty("spawn-npcs", true));
-        this.setAllowPvp(this.settings.getBooleanProperty("pvp", true));
-        this.setAllowFlight(this.settings.getBooleanProperty("allow-flight", false));
-        this.setTexturePack(this.settings.getProperty("texture-pack", ""));
-        this.setMOTD(this.settings.getProperty("motd", "A Minecraft Server"));
-        this.setForceGamemode(this.settings.getBooleanProperty("force-gamemode", false));
         this.func_143006_e(this.settings.getIntProperty("player-idle-timeout", 0));
 
-        if (this.settings.getIntProperty("difficulty", 1) < 0) {
-            this.settings.setProperty("difficulty", Integer.valueOf(0));
-        } else if (this.settings.getIntProperty("difficulty", 1) > 3) {
-            this.settings.setProperty("difficulty", Integer.valueOf(3));
-        }
-
-        this.canSpawnStructures = this.settings.getBooleanProperty("generate-structures", true);
-        int var2 = this.settings.getIntProperty("gamemode", EnumGameType.SURVIVAL.getID());
-        this.gameType = WorldSettings.getGameTypeById(var2);
-        this.getLogAgent().logInfo("Default game type: " + this.gameType);
         InetAddress var3 = null;
 
         if (this.getServerHostname().length() > 0) {
@@ -103,7 +85,7 @@
         this.getLogAgent().logInfo("Starting Minecraft server on " + (this.getServerHostname().length() == 0 ? "*" : this.getServerHostname()) + ":" + this.getServerPort());
 
         try {
-            this.networkThread = new DedicatedServerListenThread(this, var3, this.getServerPort());
+            this.networkThread = new NettyServerHandler(this, var3, this.getServerPort());
         } catch (IOException var16) {
             this.getLogAgent().logWarning("**** FAILED TO BIND TO PORT!");
             this.getLogAgent().logWarningFormatted("The exception was: {0}", new Object[] {var16.toString()});
@@ -121,39 +103,12 @@
         this.setConfigurationManager(new DedicatedPlayerList(this));
         long var4 = System.nanoTime();
 
-        if (this.getFolderName() == null) {
-            this.setFolderName(this.settings.getProperty("level-name", "world"));
-        }
-
-        String var6 = this.settings.getProperty("level-seed", "");
-        String var7 = this.settings.getProperty("level-type", "DEFAULT");
-        String var8 = this.settings.getProperty("generator-settings", "");
-        long var9 = (new Random()).nextLong();
-
-        if (var6.length() > 0) {
-            try {
-                long var11 = Long.parseLong(var6);
-
-                if (var11 != 0L) {
-                    var9 = var11;
-                }
-            } catch (NumberFormatException var15) {
-                var9 = (long)var6.hashCode();
-            }
-        }
-
-        WorldType var17 = WorldType.parseWorldType(var7);
-
-        if (var17 == null) {
-            var17 = WorldType.DEFAULT;
-        }
-
         this.setBuildLimit(this.settings.getIntProperty("max-build-height", 256));
         this.setBuildLimit((this.getBuildLimit() + 8) / 16 * 16);
         this.setBuildLimit(MathHelper.clamp_int(this.getBuildLimit(), 64, 256));
         this.settings.setProperty("max-build-height", Integer.valueOf(this.getBuildLimit()));
         this.getLogAgent().logInfo("Preparing level \"" + this.getFolderName() + "\"");
-        this.loadAllWorlds(this.getFolderName(), this.getFolderName(), var9, var17, var8);
+        this.loadAllWorlds(this.getFolderName(), this.getFolderName(), 0L);
         long var12 = System.nanoTime() - var4;
         String var14 = String.format("%.3fs", new Object[] {Double.valueOf((double)var12 / 1.0E9D)});
         this.getLogAgent().logInfo("Done (" + var14 + ")! For help, type \"help\" or \"?\"");
@@ -173,10 +128,6 @@
         return true;
     }
 
-    public boolean canStructuresSpawn() {
-        return this.canSpawnStructures;
-    }
-
     public EnumGameType getGameType() {
         return this.gameType;
     }
@@ -233,11 +184,11 @@
     }
 
     public boolean getAllowNether() {
-        return this.settings.getBooleanProperty("allow-nether", true);
+        return true;
     }
 
     public boolean allowSpawnMonsters() {
-        return this.settings.getBooleanProperty("spawn-monsters", true);
+        return true;
     }
 
     public void addServerStatsToSnooper(PlayerUsageSnooper par1PlayerUsageSnooper) {
@@ -319,15 +270,6 @@
         return var1 != null ? var1.getAbsolutePath() : "No settings file";
     }
 
-    public void func_120011_ar() {
-        MinecraftServerGui.func_120016_a(this);
-        this.guiIsEnabled = true;
-    }
-
-    public boolean getGuiEnabled() {
-        return this.guiIsEnabled;
-    }
-
     /**
      * On dedicated does nothing. On integrated, sets commandsAllowedForAll, gameType and allows external connections.
      */
@@ -339,7 +281,7 @@
      * Return whether command blocks are enabled.
      */
     public boolean isCommandBlockEnabled() {
-        return this.settings.getBooleanProperty("enable-command-block", false);
+        return true;
     }
 
     /**
@@ -355,8 +297,6 @@
     public boolean isBlockProtected(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer) {
         if (par1World.provider.dimensionId != 0) {
             return false;
-        } else if (this.getDedicatedPlayerList().getOps().isEmpty()) {
-            return false;
         } else if (this.getDedicatedPlayerList().isPlayerOpped(par5EntityPlayer.getCommandSenderName())) {
             return false;
         } else if (this.getSpawnProtectionSize() <= 0) {
