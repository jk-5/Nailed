--- ../src_base/minecraft_server/net/minecraft/src/DedicatedServer.java
+++ ../src_work/minecraft_server/net/minecraft/src/DedicatedServer.java
@@ -16,9 +16,8 @@
    private RConThreadMain theRConThreadMain;
    private PropertyManager settings;
    private boolean canSpawnStructures;
-   private EnumGameType gameType;
+   private EnumGameType gameType = EnumGameType.ADVENTURE;
    private NetworkListenThread networkThread;
-   private boolean guiIsEnabled;
 
    public DedicatedServer(File par1File) {
       super(par1File);
@@ -44,23 +43,6 @@
          this.setHostname(this.settings.getStringProperty("server-ip", ""));
       }
 
-      this.setCanSpawnAnimals(this.settings.getBooleanProperty("spawn-animals", true));
-      this.setCanSpawnNPCs(this.settings.getBooleanProperty("spawn-npcs", true));
-      this.setAllowPvp(this.settings.getBooleanProperty("pvp", true));
-      this.setAllowFlight(this.settings.getBooleanProperty("allow-flight", false));
-      this.setTexturePack(this.settings.getStringProperty("texture-pack", ""));
-      this.setMOTD(this.settings.getStringProperty("motd", "A Minecraft Server"));
-      this.func_104055_i(this.settings.getBooleanProperty("force-gamemode", false));
-      if(this.settings.getIntProperty("difficulty", 1) < 0) {
-         this.settings.setProperty("difficulty", Integer.valueOf(0));
-      } else if(this.settings.getIntProperty("difficulty", 1) > 3) {
-         this.settings.setProperty("difficulty", Integer.valueOf(3));
-      }
-
-      this.canSpawnStructures = this.settings.getBooleanProperty("generate-structures", true);
-      int var2 = this.settings.getIntProperty("gamemode", EnumGameType.SURVIVAL.getID());
-      this.gameType = WorldSettings.getGameTypeById(var2);
-      this.getLogAgent().func_98233_a("Default game type: " + this.gameType);
       InetAddress var3 = null;
       if(this.getServerHostname().length() > 0) {
          var3 = InetAddress.getByName(this.getServerHostname());
@@ -92,36 +74,13 @@
 
       this.setConfigurationManager(new DedicatedPlayerList(this));
       long var4 = System.nanoTime();
-      if(this.getFolderName() == null) {
-         this.setFolderName(this.settings.getStringProperty("level-name", "world"));
-      }
-
-      String var6 = this.settings.getStringProperty("level-seed", "");
-      String var7 = this.settings.getStringProperty("level-type", "DEFAULT");
-      String var8 = this.settings.getStringProperty("generator-settings", "");
-      long var9 = (new Random()).nextLong();
-      if(var6.length() > 0) {
-         try {
-            long var11 = Long.parseLong(var6);
-            if(var11 != 0L) {
-               var9 = var11;
-            }
-         } catch (NumberFormatException var15) {
-            var9 = (long)var6.hashCode();
-         }
-      }
-
-      WorldType var17 = WorldType.parseWorldType(var7);
-      if(var17 == null) {
-         var17 = WorldType.DEFAULT;
-      }
 
       this.setBuildLimit(this.settings.getIntProperty("max-build-height", 256));
       this.setBuildLimit((this.getBuildLimit() + 8) / 16 * 16);
       this.setBuildLimit(MathHelper.clamp_int(this.getBuildLimit(), 64, 256));
       this.settings.setProperty("max-build-height", Integer.valueOf(this.getBuildLimit()));
       this.getLogAgent().func_98233_a("Preparing level \"" + this.getFolderName() + "\"");
-      this.loadAllWorlds(this.getFolderName(), this.getFolderName(), var9, var17, var8);
+      this.loadAllWorlds(this.getFolderName(), this.getFolderName(), 0l);
       long var12 = System.nanoTime() - var4;
       String var14 = String.format("%.3fs", new Object[]{Double.valueOf((double)var12 / 1.0E9D)});
       this.getLogAgent().func_98233_a("Done (" + var14 + ")! For help, type \"help\" or \"?\"");
@@ -140,10 +99,6 @@
       return true;
    }
 
-   public boolean canStructuresSpawn() {
-      return this.canSpawnStructures;
-   }
-
    public EnumGameType getGameType() {
       return this.gameType;
    }
@@ -185,7 +140,7 @@
    }
 
    public boolean getAllowNether() {
-      return this.settings.getBooleanProperty("allow-nether", true);
+      return true;
    }
 
    public boolean allowSpawnMonsters() {
@@ -250,15 +205,6 @@
       return var1 != null?var1.getAbsolutePath():"No settings file";
    }
 
-   public void func_120011_ar() {
-      MinecraftServerGui.func_120016_a(this);
-      this.guiIsEnabled = true;
-   }
-
-   public boolean getGuiEnabled() {
-      return this.guiIsEnabled;
-   }
-
    public String shareToLAN(EnumGameType par1EnumGameType, boolean par2) {
       return "";
    }
@@ -273,8 +219,6 @@
 
    public boolean func_96290_a(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer) {
       if(par1World.provider.dimensionId != 0) {
-         return false;
-      } else if(this.getDedicatedPlayerList().getOps().isEmpty()) {
          return false;
       } else if(this.getDedicatedPlayerList().areCommandsAllowed(par5EntityPlayer.getCommandSenderName())) {
          return false;
