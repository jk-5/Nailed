--- ../src_base/minecraft_server/net/minecraft/src/DedicatedServer.java
+++ ../src_work/minecraft_server/net/minecraft/src/DedicatedServer.java
@@ -7,6 +7,8 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
+
+import jk_5.nailed.network.NettyServerHandler;
 import net.minecraft.server.MinecraftServer;
 
 public class DedicatedServer extends MinecraftServer implements IServer
@@ -17,9 +19,8 @@
     private RConThreadMain theRConThreadMain;
     private PropertyManager settings;
     private boolean canSpawnStructures;
-    private EnumGameType gameType;
+    private EnumGameType gameType = EnumGameType.ADVENTURE;
     private NetworkListenThread networkThread;
-    private boolean guiIsEnabled;
 
     public DedicatedServer(File par1File)
     {
@@ -55,29 +56,8 @@
             this.setOnlineMode(this.settings.getBooleanProperty("online-mode", true));
             this.setHostname(this.settings.getStringProperty("server-ip", ""));
         }
-
-        this.setCanSpawnAnimals(this.settings.getBooleanProperty("spawn-animals", true));
-        this.setCanSpawnNPCs(this.settings.getBooleanProperty("spawn-npcs", true));
-        this.setAllowPvp(this.settings.getBooleanProperty("pvp", true));
-        this.setAllowFlight(this.settings.getBooleanProperty("allow-flight", false));
-        this.setTexturePack(this.settings.getStringProperty("texture-pack", ""));
-        this.setMOTD(this.settings.getStringProperty("motd", "A Minecraft Server"));
-        this.setForceGamemode(this.settings.getBooleanProperty("force-gamemode", false));
         this.func_143006_e(this.settings.getIntProperty("player-idle-timeout", 0));
 
-        if (this.settings.getIntProperty("difficulty", 1) < 0)
-        {
-            this.settings.setProperty("difficulty", Integer.valueOf(0));
-        }
-        else if (this.settings.getIntProperty("difficulty", 1) > 3)
-        {
-            this.settings.setProperty("difficulty", Integer.valueOf(3));
-        }
-
-        this.canSpawnStructures = this.settings.getBooleanProperty("generate-structures", true);
-        int var2 = this.settings.getIntProperty("gamemode", EnumGameType.SURVIVAL.getID());
-        this.gameType = WorldSettings.getGameTypeById(var2);
-        this.getLogAgent().logInfo("Default game type: " + this.gameType);
         InetAddress var3 = null;
 
         if (this.getServerHostname().length() > 0)
@@ -96,7 +76,7 @@
 
         try
         {
-            this.networkThread = new DedicatedServerListenThread(this, var3, this.getServerPort());
+            this.networkThread = new NettyServerHandler(this, var3, this.getServerPort());
         }
         catch (IOException var16)
         {
@@ -116,47 +96,13 @@
 
         this.setConfigurationManager(new DedicatedPlayerList(this));
         long var4 = System.nanoTime();
-
-        if (this.getFolderName() == null)
-        {
-            this.setFolderName(this.settings.getStringProperty("level-name", "world"));
-        }
-
-        String var6 = this.settings.getStringProperty("level-seed", "");
-        String var7 = this.settings.getStringProperty("level-type", "DEFAULT");
-        String var8 = this.settings.getStringProperty("generator-settings", "");
-        long var9 = (new Random()).nextLong();
-
-        if (var6.length() > 0)
-        {
-            try
-            {
-                long var11 = Long.parseLong(var6);
-
-                if (var11 != 0L)
-                {
-                    var9 = var11;
-                }
-            }
-            catch (NumberFormatException var15)
-            {
-                var9 = (long)var6.hashCode();
-            }
-        }
-
-        WorldType var17 = WorldType.parseWorldType(var7);
-
-        if (var17 == null)
-        {
-            var17 = WorldType.DEFAULT;
-        }
 
         this.setBuildLimit(this.settings.getIntProperty("max-build-height", 256));
         this.setBuildLimit((this.getBuildLimit() + 8) / 16 * 16);
         this.setBuildLimit(MathHelper.clamp_int(this.getBuildLimit(), 64, 256));
         this.settings.setProperty("max-build-height", Integer.valueOf(this.getBuildLimit()));
         this.getLogAgent().logInfo("Preparing level \"" + this.getFolderName() + "\"");
-        this.loadAllWorlds(this.getFolderName(), this.getFolderName(), var9, var17, var8);
+        this.loadAllWorlds(this.getFolderName(), this.getFolderName(), 0L);
         long var12 = System.nanoTime() - var4;
         String var14 = String.format("%.3fs", new Object[] {Double.valueOf((double)var12 / 1.0E9D)});
         this.getLogAgent().logInfo("Done (" + var14 + ")! For help, type \"help\" or \"?\"");
@@ -176,11 +122,6 @@
         }
 
         return true;
-    }
-
-    public boolean canStructuresSpawn()
-    {
-        return this.canSpawnStructures;
     }
 
     public EnumGameType getGameType()
@@ -251,12 +192,12 @@
 
     public boolean getAllowNether()
     {
-        return this.settings.getBooleanProperty("allow-nether", true);
+        return true;
     }
 
     public boolean allowSpawnMonsters()
     {
-        return this.settings.getBooleanProperty("spawn-monsters", true);
+        return true;
     }
 
     public void addServerStatsToSnooper(PlayerUsageSnooper par1PlayerUsageSnooper)
@@ -352,17 +293,6 @@
         return var1 != null ? var1.getAbsolutePath() : "No settings file";
     }
 
-    public void func_120011_ar()
-    {
-        MinecraftServerGui.func_120016_a(this);
-        this.guiIsEnabled = true;
-    }
-
-    public boolean getGuiEnabled()
-    {
-        return this.guiIsEnabled;
-    }
-
     /**
      * On dedicated does nothing. On integrated, sets commandsAllowedForAll, gameType and allows external connections.
      */
@@ -376,7 +306,7 @@
      */
     public boolean isCommandBlockEnabled()
     {
-        return this.settings.getBooleanProperty("enable-command-block", false);
+        return true;
     }
 
     /**
@@ -393,10 +323,6 @@
     public boolean isBlockProtected(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer)
     {
         if (par1World.provider.dimensionId != 0)
-        {
-            return false;
-        }
-        else if (this.getDedicatedPlayerList().getOps().isEmpty())
         {
             return false;
         }
